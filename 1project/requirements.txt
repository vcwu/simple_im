CS423 Spring 2013

Project #1 Client Programming (connectionless client)

Instant Messaging with File Transfer

Points (50)

Assigned: Friday 2/15/2013

Due: Tuesday 3/4/2013

     For our project this semester, we will work with a simplified (but also enhanced) Instant Messaging program. For this UDP implementation, we will use a server-based model in which we have a centralized server that handles all communications between clients. When a client signs onto the system, they get a list of all of the users who are currently signed onto the system. When a user wants to send a message (using the format below), he/she will send it to the server which will forward it to the desired recipient.
     When someone else logs onto the system, the server will notify you.  Likewise you will get a notification when someone leaves.  Since the centralized server will be periodically sending these messages to all users, your IM client will need to maintain a separate thread to monitor the "connection" with the server. At the same time, your client will need to maintain a presence with the user of the program, so that the user can request to either send a message, check for received messages, or to log off.

     In class, we have discussed both connection oriented and connectionless clients. We have also discussed (and seen examples from the book) of applications that use UDP in a connection oriented mode. For this assignment, you are to develop a TRUE connectionless client (of the form of UDPecho_cnls in the lectures) for an Instant Messaging service.

Client: You are to build an IM client that will connect to a server that manages all of the conversations. The application protocol has 5 message types:

Sign onto system message format: (From client to server)

msg#;1;myName 
(Send to server a single line of text. Msg# is a 5 character integer (see program notes below) in the range of 10000 to 99999, followed by a semi-colon. Message type is 1, followed by semi-colon, then followed by your username.)
Server will respond with an acknowledge and a welcome message and a list of the other users already logged onto system (if any). 
ack:msg#\n
Welcome to the group, myName\n
Members already logged in are:\n
 A list (possibly empty) of logged in users
Server will return the msg# sent in the request, followed by a welcome and possibly a list of logged in members.
 
Send a message to another user: (From client to another client)

msg#;2;myName\n 
buddyName\n 
message 
(First line includes msg#, semi-colon, message type (2), semi-colon, sender’s name.) 
(Second line includes only the receiver’s name) 
(Third line contains the message.) 
Server will respond to the sender with: 
ack;msg#
Server will then reformat message into a 2 line format and forward to receiver. 
From: myName To buddyName\n 
message
 
Sign off of system (From client to server)

msg#;3;myName 
(Msg#, semi-colon, message type (3), followed by a semi-colon, followed by your username.) 
Server will respond with: 
ack;msg#;Goodbye
Server will then remove your name and host address from the system, send you a goodbye message, and notify other users that you have logged out.
 
"List Files" Message (From client to server)

msg#;4;fileList
(Msg#, semi-colon, message type (4), followed by a semi-colon, followed by the request.) 
The server will scan its file repository directory and return a count of the number of files available, along with a list of all files.
ack;msg#;fileCount\n
file1\n
file2\n
etc.

“Get File” Message (from Client to Server)
msg#;5;filename
This message requests a file from the server’s file repository.  The server will try to retrieve the file.  If it is unavailable, it will return an error message (see below).  If it is available, it will begin to send the file.  All packets (except the last) will contain 512 bytes of data, along with a 16 byte header.  The block count will be a 5 character integer similar to the message number described earlier, beginning with block 1 and incrementing for each block sent.  The client and server should use the same message number for the entire file transfer (since the transfer is the result of the Get File message with that number).
fil;msg#;blockCount\n
512 bytes of data (except for last block).
The client should then request the next block of data.
msg#;6;blockcount
Error Messages (From server to client, but could also be client to client for other error types)

Error;msg#;Error Text ... 
If the server detects an error in the message format, it will return a message of the above format. First word will be Error followed by the message number of the message in error, followed by some text that relates to the error. Your program may choose to resend the message (after fixing the message), to terminate the session, or take some other action. At a minimum, it should print the error for the user. More elegant solutions get more points. Of course, if your program doesn't generate any errors at all, that is best.

Possible errors currently detected:
User group is full (too many users logged in)
Message number is incorrect
We got a message request, but sender isn't logged in
We got a message request, but buddy isn't logged in
Message format is invalid
Message type is invalid
File Request failed.  File would not open.
Etc.
 
Program Notes:

Each message that you send out to the server should start with a message number. Start with some random number above 10000 and increment that number by one for each message that you send. The number should be represented as 5 ASCII characters in your message (leading 0's if needed). The server will respond to those messages with an acknowledgement of that message number and possibly other information (depending on the message. If you don't get an acknowledgement message, or if the message # doesn't agree, your program should alert the user.
Note that the client may receive messages from the server at any time (notification of users entering or leaving the system). You may need to create a separate thread to handle received messages, while the main thread interacts with the user.
You may find it helpful to use WireShark to monitor the flow of packets between your client and the server. That way you can be certain exactly what is being send and received.
In the sample session below, the user interface is just an example (and perhaps not all that good an example). There are many other ways to manage the interaction with the user.
Sample User Session

Program requirements:

The client must allow the user to specify the service port number and server name from the command line. This is the approach used in Comer’s example code.
Enough documentation (either embedded in the code with comments, or external) to follow how you parsed the program and to follow what you expect to happen. (This is to get you prepared for what I’ll be looking for with the rest of the programming projects.
Source code for your program.
A Sample output. This can be generated by using the editing features of the command prompt window. If you click on the MSDOS icon in the upper left corner of the command window, you will get a drop down menu that includes an "edit" item. If you select "mark", you can then drag the cursor over everything that you want to keep. When you hit "enter" you will place that information into the clipboard. You can then paste it into a separate file (notepad..) that you can print or upload.
